<?php

namespace App\Providers;

use App\ApplicationContext;
use App\Http\XHttpHeader;
use Illuminate\Contracts\Auth\Factory;
use Illuminate\Contracts\Config\Repository as ConfigRepository;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Http\Request;
use Illuminate\Support\ServiceProvider;
use Myshop\Domain\Model\User;
use Ramsey\Uuid\Uuid;

class ApplicationContextServiceProvider extends ServiceProvider
{
    public function register()
    {
        $this->app->singleton(ApplicationContext::class, function (Application $app) {
            $runningInConsole = php_sapi_name() == 'cli';
            $config = $app->make(ConfigRepository::class);

            return new ApplicationContext([
                'runningInConsole' => $runningInConsole,
                'appEnv' => $config->get('app.env', 'UNKNOWN'),
                'appVersion' => $config->get('app.version', 'UNKNOWN'),
                'transactionId' => $this->getTransactionId(),
                'traceNumber' => $this->getTraceNumber(),
                'user' => $this->getUser(),
                'clientIp' => $runningInConsole ? null : $this->getClientIp()
            ]);
        });
    }

    private function getTransactionId()
    {
        /** @var Request $request */
        $request = $this->app->make(Request::class);
        if ($request->hasHeader(XHttpHeader::REQUEST_ID)) {
            // X-Vendor-Request-Id passed by a Client is always preferred over any other.
            return trim(urldecode($request->header(XHttpHeader::REQUEST_ID)));
        }
        if ($request->hasHeader(XHttpHeader::UNIQUE_ID)) {
            // Next preference is UniqueId request header generated by the web server.
            return trim(urldecode($request->header(XHttpHeader::UNIQUE_ID)));
        }
        return (string)Uuid::uuid4();
    }

    private function getTraceNumber()
    {
        $request = $this->app->make(Request::class);
        return $request->hasHeader(XHttpHeader::TRACE_NUMBER)
            ? (int)trim(urldecode($request->header(XHttpHeader::TRACE_NUMBER))) : null;
    }

    private function getUser($guardName = 'api')
    {
        if (php_sapi_name() == 'cli') {
            return User::createDefaultUser([
                'name' => 'CLI',
                'email' => 'cli@example.com',
            ]);
        }

        /** @var Factory $authFactory */
        $authFactory = $this->app->make(Factory::class);
        $guard = $authFactory->guard($guardName);
        return $guard->user() ?: User::createDefaultUser();
    }

    private function getClientIp()
    {
        /** @var Request $request */
        $request = $this->app->make(Request::class);
        return $request->getClientIp();
    }
}
